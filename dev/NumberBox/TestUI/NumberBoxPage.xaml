<!--  Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT License. See LICENSE in the project root for license information.  -->
<local:TestPage x:Class="MUXControlsTestApp.NumberBoxPage"
                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:contract5Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,5)"
                xmlns:controls="using:Microsoft.UI.Xaml.Controls"
                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                xmlns:local="using:MUXControlsTestApp"
                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                x:Name="NumberBoxTestPage"
                mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <StackPanel Padding="12"
                    contract5Present:Spacing="4"
                    Background="{ThemeResource SystemControlBackgroundBaseLowBrush}"
                    Orientation="Vertical">

            <ComboBox x:Name="ValidationComboBox"
                      AutomationProperties.Name="ValidationComboBox"
                      Header="Validation Mode"
                      SelectedIndex="0"
                      SelectionChanged="Validation_Changed">
                <ComboBoxItem Content="InvalidInputOverwritten" />
                <ComboBoxItem Content="Disabled" />
            </ComboBox>

            <ComboBox x:Name="SpinModeComboBox"
                      AutomationProperties.Name="SpinModeComboBox"
                      Header="SpinButtonMode"
                      SelectedIndex="0"
                      SelectionChanged="SpinMode_Changed">
                <ComboBoxItem Content="Hidden" />
                <ComboBoxItem Content="Compact" />
                <ComboBoxItem Content="Inline" />
            </ComboBox>

            <CheckBox x:Name="EnabledCheckBox"
                      AutomationProperties.Name="EnabledCheckBox"
                      Content="Enabled"
                      IsChecked="True" />

            <CheckBox x:Name="ExpressionCheckBox"
                      AutomationProperties.Name="ExpressionCheckBox"
                      Content="Accepts Expression"
                      IsChecked="False" />

            <CheckBox x:Name="WrapCheckBox"
                      AutomationProperties.Name="WrapCheckBox"
                      Content="Wrap Enabled"
                      IsChecked="False" />

            <!--  Set Text instead of Value to verify that it works  -->
            <controls:NumberBox x:Name="SmallChangeNumberBox"
                                AutomationProperties.Name="SmallChangeNumberBox"
                                Header="SmallChange"
                                Text="1" />
            <controls:NumberBox x:Name="LargeChangeNumberBox"
                                AutomationProperties.Name="LargeChangeNumberBox"
                                Header="LargeChange"
                                Text="10" />

            <StackPanel Orientation="Horizontal">
                <CheckBox x:Name="MinCheckBox"
                          MinWidth="32"
                          VerticalAlignment="Bottom"
                          AutomationProperties.Name="MinCheckBox"
                          Checked="MinCheckBox_CheckChanged"
                          IsChecked="False"
                          Unchecked="MinCheckBox_CheckChanged" />
                <controls:NumberBox x:Name="MinNumberBox"
                                    AutomationProperties.Name="MinNumberBox"
                                    Header="Minimum"
                                    IsEnabled="False"
                                    ValueChanged="MinValueChanged"
                                    Value="0" />
            </StackPanel>

            <StackPanel Orientation="Horizontal">
                <CheckBox x:Name="MaxCheckBox"
                          MinWidth="32"
                          VerticalAlignment="Bottom"
                          AutomationProperties.Name="MaxCheckBox"
                          Checked="MaxCheckBox_CheckChanged"
                          IsChecked="False"
                          Unchecked="MaxCheckBox_CheckChanged" />
                <!--  Verify that setting Value overrides setting Text  -->
                <controls:NumberBox x:Name="MaxNumberBox"
                                    AutomationProperties.Name="MaxNumberBox"
                                    Header="Maximum"
                                    IsEnabled="False"
                                    Text="50"
                                    ValueChanged="MaxValueChanged"
                                    Value="100" />
            </StackPanel>

            <Button x:Name="CustomFormatterButton"
                    Margin="0,4,0,0"
                    AutomationProperties.Name="CustomFormatterButton"
                    Click="CustomFormatterButton_Click"
                    Content="Custom Formatter" />

            <Button x:Name="SetTextButton"
                    Margin="0,4,0,0"
                    AutomationProperties.Name="SetTextButton"
                    Click="SetTextButton_Click"
                    Content="Set text to 15" />

            <Button x:Name="SetValueButton"
                    Margin="0,4,0,0"
                    AutomationProperties.Name="SetValueButton"
                    Click="SetValueButton_Click"
                    Content="Set value to 42" />

            <Button x:Name="SetValueNaNButton"
                    Margin="0,4,0,0"
                    AutomationProperties.Name="SetValueNaNButton"
                    Click="SetNaNButton_Click"
                    Content="Set value to NaN" />

            <Button x:Name="SetTwoWayBoundValueNaNButton"
                    Margin="0,4,0,0"
                    AutomationProperties.Name="SetTwoWayBoundValueNaNButton"
                    Click="SetTwoWayBoundNaNButton_Click"
                    Content="Set two way bound value to NaN" />

            <Button x:Name="ToggleHeaderValueButton"
                    Margin="0,4,0,0"
                    AutomationProperties.Name="ToggleHeaderValueButton"
                    Click="ToggleHeaderValueButton_Click"
                    Content="Toggle header for clipping issue" />

            <Button x:Name="ToggleHeaderTemplateValueButton"
                    Margin="0,4,0,0"
                    AutomationProperties.Name="ToggleHeaderTemplateValueButton"
                    Click="ToggleHeaderTemplateValueButton_Click"
                    Content="Toggle header template" />

        </StackPanel>

        <Grid Grid.Column="1">

            <StackPanel HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        contract5Present:Spacing="4"
                        Orientation="Vertical">
                <!--  Standard NumberBox test UI  -->
                <StackPanel contract5Present:Spacing="4">

                    <!--  TextAlignment  -->
                    <controls:NumberBox Header="Right TextAlignment"
                                        TextAlignment="Right"
                                        Value="123" />
                    <controls:NumberBox Header="Center TextAlignment"
                                        TextAlignment="Center"
                                        Value="456" />


                    <controls:NumberBox x:Name="TestNumberBox"
                                        MinWidth="150"
                                        AcceptsExpression="{x:Bind ExpressionCheckBox.IsChecked.Value, Mode=OneWay}"
                                        Description="Description text"
                                        Header="TestNumberBox"
                                        IsEnabled="{x:Bind EnabledCheckBox.IsChecked.Value, Mode=OneWay}"
                                        IsWrapEnabled="{x:Bind WrapCheckBox.IsChecked.Value, Mode=OneWay}"
                                        LargeChange="{x:Bind LargeChangeNumberBox.Value, Mode=OneWay}"
                                        PlaceholderText="Text"
                                        SmallChange="{x:Bind SmallChangeNumberBox.Value, Mode=OneWay}"
                                        ValueChanged="NumberBoxValueChanged" />

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="0,0,5,0" Text="Value:" />
                        <TextBlock x:Name="NewValueTextBox"
                                   AutomationProperties.Name="NewValueTextBox"
                                   Text="0" />
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="0,0,5,0" Text="Old Value:" />
                        <TextBlock x:Name="OldValueTextBox" AutomationProperties.Name="OldValueTextBox" />
                    </StackPanel>

                    <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="0,0,5,0" Text="Text:" />
                        <TextBlock x:Name="TextTextBox"
                                   AutomationProperties.Name="TextTextBox"
                                   Text="0" />
                    </StackPanel>
                </StackPanel>

                <!--  NumberBox for nested scrolling bug(s)  -->
                <StackPanel Margin="30,0,0,0">
                    <TextBlock>NumberBox inside ScrollViewer test</TextBlock>
                    <ScrollViewer x:Name="ScrollviewerWithScroll"
                                  Width="200"
                                  Height="50"
                                  ViewChanged="ScrollviewerWithScroll_ViewChanged">
                        <StackPanel>
                            <controls:NumberBox x:Name="NumberBoxInScroller" AutomationProperties.Name="NumberBoxInScroller" />
                            <controls:NumberBox />
                            <controls:NumberBox />
                        </StackPanel>
                    </ScrollViewer>

                    <TextBlock x:Name="VerticalOffsetDisplayBlock"
                               AutomationProperties.Name="VerticalOffsetDisplayBlock"
                               Text="0" />
                </StackPanel>

                <!--  NumberBox two way binding with x:Bind  -->
                <StackPanel>
                    <controls:NumberBox x:Name="TwoWayBoundNumberBox"
                                        Header="TwoWayBinding"
                                        Value="{x:Bind DataModelWithINPC.Value, Mode=TwoWay}" />
                    <TextBlock x:Name="TwoWayBoundNumberBoxValue" AutomationProperties.Name="TwoWayBoundNumberBoxValue" />
                </StackPanel>

                <!--  Testing alignment with textbox and without specified header  -->
                <StackPanel Orientation="Horizontal">
                    <TextBox MaxHeight="30" VerticalAlignment="Top" />
                    <controls:NumberBox x:Name="HeaderTestingNumberBox"
                                        MaxHeight="32"
                                        VerticalAlignment="Top"
                                        PlaceholderText="I should not be clipped without header" />
                    <controls:NumberBox x:Name="HeaderTestingNumberBoxTwo"
                                        MaxHeight="32"
                                        VerticalAlignment="Top">
                        <controls:NumberBox.HeaderTemplate>
                            <DataTemplate>
                                <TextBlock AutomationProperties.Name="HeaderTemplateBeforeApplayTemplateTest" Text="MyText" />
                            </DataTemplate>
                        </controls:NumberBox.HeaderTemplate>
                    </controls:NumberBox>
                    <controls:NumberBox>
                        <controls:NumberBox.Header>
                            <TextBlock AutomationProperties.Name="HeaderBeforeApplyTemplateTest" Text="TestNumberBox" />
                        </controls:NumberBox.Header>
                    </controls:NumberBox>
                    <controls:NumberBox x:Name="HeaderTemplateTestingNumberBox" />
                </StackPanel>

                <!--  FontSize propagation  -->
                <controls:NumberBox FontSize="50" Header="Header text" />
            </StackPanel>
        </Grid>

    </Grid>
</local:TestPage>
