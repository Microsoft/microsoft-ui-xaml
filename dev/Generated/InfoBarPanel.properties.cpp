// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "InfoBarPanel.h"

namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    CppWinRTActivatableClassWithDPFactory(InfoBarPanel)
}

#include "InfoBarPanel.g.cpp"

GlobalDependencyProperty InfoBarPanelProperties::s_HorizontalMarginProperty{ nullptr };
GlobalDependencyProperty InfoBarPanelProperties::s_VerticalMarginProperty{ nullptr };

InfoBarPanelProperties::InfoBarPanelProperties()
{
    EnsureProperties();
}

void InfoBarPanelProperties::EnsureProperties()
{
    if (!s_HorizontalMarginProperty)
    {
        s_HorizontalMarginProperty =
            InitializeDependencyProperty(
                L"HorizontalMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_PaddingInVerticalOrientationProperty)
    {
        s_PaddingInVerticalOrientationProperty =
            InitializeDependencyProperty(
                L"PaddingInVerticalOrientation",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SpacingInHorizontalOrientationProperty)
    {
        s_SpacingInHorizontalOrientationProperty =
            InitializeDependencyProperty(
                L"SpacingInHorizontalOrientation",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                true /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_VerticalMarginProperty)
    {
        s_VerticalMarginProperty =
            InitializeDependencyProperty(
                L"VerticalMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_VerticalOrientationMarginProperty)
    {
        s_VerticalOrientationMarginProperty =
            InitializeDependencyProperty(
                L"VerticalOrientationMargin",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                true /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_VerticalOrientationPaddingProperty)
    {
        s_VerticalOrientationPaddingProperty =
            InitializeDependencyProperty(
                L"VerticalOrientationPadding",
                winrt::name_of<winrt::Thickness>(),
                winrt::name_of<winrt::InfoBarPanel>(),
                false /* isAttached */,
                ValueHelper<winrt::Thickness>::BoxedDefaultValue(),
                nullptr);
    }
}

void InfoBarPanelProperties::ClearProperties()
{
    s_HorizontalMarginProperty = nullptr;
    s_VerticalMarginProperty = nullptr;
}

void InfoBarPanelProperties::PaddingInHorizontalOrientation(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InfoBarPanel*>(this)->SetValue(s_PaddingInHorizontalOrientationProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

void InfoBarPanelProperties::SetHorizontalMargin(winrt::DependencyObject const& target, winrt::Thickness const& value)
{
    target.SetValue(s_HorizontalMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
}

winrt::Thickness InfoBarPanelProperties::GetHorizontalMargin(winrt::DependencyObject const& target)
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(target.GetValue(s_HorizontalMarginProperty));
    {
    static_cast<InfoBarPanel*>(this)->SetValue(s_PaddingInVerticalOrientationProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness InfoBarPanelProperties::PaddingInVerticalOrientation()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<InfoBarPanel*>(this)->GetValue(s_PaddingInVerticalOrientationProperty));
}

void InfoBarPanelProperties::HorizontalOrientationPadding(winrt::Thickness const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<InfoBarPanel*>(this)->SetValue(s_HorizontalOrientationPaddingProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

void InfoBarPanelProperties::SetVerticalMargin(winrt::DependencyObject const& target, winrt::Thickness const& value)
{
    target.SetValue(s_VerticalMarginProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
}

winrt::Thickness InfoBarPanelProperties::GetVerticalMargin(winrt::DependencyObject const& target)
void InfoBarPanelProperties::SetVerticalOrientationMargin(winrt::DependencyObject const& target, winrt::Thickness const& value)
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(target.GetValue(s_VerticalMarginProperty));
}

    static_cast<InfoBarPanel*>(this)->SetValue(s_VerticalOrientationPaddingProperty, ValueHelper<winrt::Thickness>::BoxValueIfNecessary(value));
    }
}

winrt::Thickness InfoBarPanelProperties::VerticalOrientationPadding()
{
    return ValueHelper<winrt::Thickness>::CastOrUnbox(static_cast<InfoBarPanel*>(this)->GetValue(s_VerticalOrientationPaddingProperty));
}
