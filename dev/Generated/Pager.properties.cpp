// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "Pager.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(Pager)
}

#include "Pager.g.cpp"

GlobalDependencyProperty PagerProperties::s_PlaceholderProperty{ nullptr };

PagerProperties::PagerProperties()
{
    EnsureProperties();
}

void PagerProperties::EnsureProperties()
{
    if (!s_PlaceholderProperty)
    {
        s_PlaceholderProperty =
            InitializeDependencyProperty(
                L"Placeholder",
                winrt::name_of<winrt::IInspectable>(),
                winrt::name_of<winrt::Pager>(),
                false /* isAttached */,
                ValueHelper<winrt::IInspectable>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPlaceholderPropertyChanged));
    }
}

void PagerProperties::ClearProperties()
{
    s_PlaceholderProperty = nullptr;
}

void PagerProperties::OnPlaceholderPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::Pager>();
    winrt::get_self<Pager>(owner)->OnPropertyChanged(args);
}

void PagerProperties::Placeholder(winrt::IInspectable const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<Pager*>(this)->SetValue(s_PlaceholderProperty, ValueHelper<winrt::IInspectable>::BoxValueIfNecessary(value));
    }
}

winrt::IInspectable PagerProperties::Placeholder()
{
    return ValueHelper<winrt::IInspectable>::CastOrUnbox(static_cast<Pager*>(this)->GetValue(s_PlaceholderProperty));
}
