// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "HamburgerAnimatedIcon.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(HamburgerAnimatedIcon)
}

#include "HamburgerAnimatedIcon.g.cpp"

GlobalDependencyProperty HamburgerAnimatedIconProperties::s_IsActiveProperty{ nullptr };

HamburgerAnimatedIconProperties::HamburgerAnimatedIconProperties()
{
    EnsureProperties();
}

void HamburgerAnimatedIconProperties::EnsureProperties()
{
    AnimatedIconSource::EnsureProperties();
    if (!s_IsActiveProperty)
    {
        s_IsActiveProperty =
            InitializeDependencyProperty(
                L"IsActive",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::HamburgerAnimatedIcon>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnIsActivePropertyChanged));
    }
}

void HamburgerAnimatedIconProperties::ClearProperties()
{
    s_IsActiveProperty = nullptr;
    AnimatedIconSource::ClearProperties();
}

void HamburgerAnimatedIconProperties::OnIsActivePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::HamburgerAnimatedIcon>();
    winrt::get_self<HamburgerAnimatedIcon>(owner)->OnIsActivePropertyChanged(args);
}

void HamburgerAnimatedIconProperties::IsActive(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<HamburgerAnimatedIcon*>(this)->SetValue(s_IsActiveProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool HamburgerAnimatedIconProperties::IsActive()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<HamburgerAnimatedIcon*>(this)->GetValue(s_IsActiveProperty));
}
